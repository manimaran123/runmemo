<?php
/**
 * hook_menu
 * @return type 
 * return menu items
 */
function generate_thumbnails_menu() {
  $items['admin/image-style-manage'] = array(
                                  'title' => 'Manage image style',
                                  'description' => 'Manage the image style',
                                  'page callback' => 'manage_image_style',
                                  'access arguments' => array('Administer image styles '),
                                  'type' => MENU_CALLBACK,
                                  );
  return $items;
}
/**
 * page callback function for 
 * mange image style
 * @return type 
 */
function manage_image_style() {
 return drupal_render(drupal_get_form('manage_image_style_form'));
}
/**
 * Form for manage image style
 * @return string 
 */
function manage_image_style_form() {
  $form = array();
  $form['preview-image'] = array(
      '#type' => 'textfield',
      '#title' => 'Preview image',
      '#description' => 'Enter the preview image style name ',
      '#default_value' => variable_get('preview-image-style'),
      '#required' => TRUE,
  );
  $form['thunmbnail-image'] = array(
      '#type' => 'textfield',
      '#title' => 'thumbnail image',
      '#description' => 'Enter the preview image style name ',
      '#default_value' => variable_get('thumbnail-image-style'),
      '#required' => TRUE,
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
  );
  return $form;
}
/**
 * submit function manage image style form
 * @param type $form
 * @param type $form_state 
 */
function manage_image_style_form_submit($form, &$form_state) {
  $prev_img_style_name = $form['preview-image']['#value'];
  variable_set('preview-image-style', $prev_img_style_name);
}

/**
 * Implementation of hook_cron()
 * Function for generating thumbnail images
 */
 
function generate_thumbnails_cron() { 

  $filepath_drupal = variable_get('file_public_path') . '/';
  $dest = $filepath_drupal . 'styles/thumbnail/public';
  $prev_dest = $filepath_drupal . 'styles/preview-with-watermark/public';

  $generate_thumbnails_object = new generate_thumbnails_model();
  //$photos=$generate_thumbnails_object->get_local_photos();

  $thumbsize=$generate_thumbnails_object->get_thumbnail_size();
  $thumb=unserialize($thumbsize->data);

  $previewsize=$generate_thumbnails_object->get_preview_size();
  $prev_size=unserialize($previewsize->data);
  //print_r($prev_size);exit;

  $s3_store_object = new s3_store_model();
  foreach ($s3_store_object->get_local_photos() as $row) {
      $sourceimagename = "";
      $url = str_replace("public://", $filepath_drupal, $row->uri);

      if (file_exists($url)) { 
        //create the physical thumbnail image to its destination 
        // get the file name from the source file 
        $filearr = explode('/', $url);
        $sourceimagename = array_pop($filearr);
        if (!file_exists(url($dest . '/' . $sourceimagename, array('absolute' => TRUE)))) {
            $item = array('uri' => $row->uri, 'width' => $thumb['width'], 'height' => $thumb['height']);
            $path = array($dest . '/' . $sourceimagename);
            $variables = array('item' => $item, 'image_style' => 'thumbnail', 'path' => $path);
            theme_image_formatter($variables);
            $ch = curl_init();

            // set URL and other appropriate options
            curl_setopt($ch, CURLOPT_URL, url($dest . '/' . $sourceimagename, array('absolute' => TRUE)));
            curl_setopt($ch, CURLOPT_TIMEOUT_MS, 10000);
            curl_setopt($ch, CURLOPT_HEADER, 0);

            // grab URL and pass it to the browser
            curl_exec($ch);

            // close cURL resource, and free up system resources
            curl_close($ch);

        }
        else {
            echo '<br>Found ' . $dest . $sourceimagename . ' already existing. Hence exiting.';
            break;
        }
        if (!file_exists(url($prev_dest . '/' . $sourceimagename, array('absolute' => TRUE)))) {
            $item = array('uri' => $row->uri, 'width' => $prev_size['width'], 'height' => $prev_size['height']);
            $path = array($prev_dest . '/' . $sourceimagename);
            $variables = array('item' => $item, 'image_style' => 'preview-with-watermark', 'path' => $path);
            theme_image_formatter($variables);
            $ch = curl_init();
            // set URL and other appropriate options
            curl_setopt($ch, CURLOPT_URL, url($prev_dest . '/' . $sourceimagename, array('absolute' => TRUE)));
            curl_setopt($ch, CURLOPT_TIMEOUT_MS, 10000);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            // grab URL and pass it to the browser
            curl_exec($ch);
            // close cURL resource, and free up system resources
            curl_close($ch);

        }

        if ($thumb_status && $prev_status) {
          //Update the DB
          $status = $generate_thumbnails_object->update_thumb_status($row->fid);
        }

      }
      else {
        echo '<br>Did not find source  file ' . $url;
      }
  }
}

