<?php

/*Hooks*/

/**
 * Implementation of hook_init()
 */
function amazon_s3_init() {
  drupal_add_css(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css');
}

/**
 * Implementation of hook_menu()
 */
function amazon_s3_menu() {
  
  $items['admin/config/amazon-s3'] = array(
    'title' => 'Amazon S3 Configuration',
    'description' => t('Authentication settings for Amazon S3'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_config_form'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/structure/amazon-s3'] = array(
    'title' => 'Amazon S3 Buckets',
    'description' => t('View the buckets on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_buckets',
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/structure/amazon-s3/bucket/%'] = array(
    'title' => 'Bucket Contents',
    'description' => t('View the objects in a bucket on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_objects',
    'page arguments' => array(4),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/amazon-s3/bucket/%/delete'] = array(
    'title' => 'Delete Bucket',
    'description' => t('Delete a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_bucket_delete_confirm_form', 4),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK, 
  );
  
  $items['admin/structure/amazon-s3/bucket/%/%/delete'] = array(
    'title' => 'Delete Object in Bucket',
    'description' => t('Delete an object in a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_object_delete_confirm_form', 4, 5),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function amazon_s3_permission() {
  return array(
    'administer amazon s3' => array(
      'title' => t('Administer Amazon S3'),
      'description' => t('Configuration for Amazon S3.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Amazon S3 API Functions
 */

/**
 * Get the instance of the s3 object.
 *
 * @return S3
 */
function amazon_s3_get_instance() {
  static $s3 = NULL;
  if ($s3 == NULL) {
    module_load_include('inc', 'amazon_s3', 's3');
    $aws_access_key = variable_get('aws_access_key', '');
    $aws_secret_key = variable_get('aws_secret_key', '');
    
    if (empty($aws_access_key) OR empty($aws_secret_key)) {
      drupal_set_message('You must ' . l('set your aws access key and secret key', 'admin/config/amazon-s3') . '.', 'error');
    }
    
    $s3 = new S3($aws_access_key, $aws_secret_key);
  }
  return $s3;
}

function amazon_s3_get_buckets() {
  $s3 = amazon_s3_get_instance();
  return $s3->listBuckets();
}

function amazon_s3_bucket_create($bucket_name, $access_control = 'private') {
  $s3 = amazon_s3_get_instance();
  return $s3->putBucket($bucket_name, $access_control);
}

function amazon_s3_bucket_delete($bucket) {
  $s3 = amazon_s3_get_instance();
  return $s3->deleteBucket($bucket);
}

function amazon_s3_get_object_url($bucket, $object, $lifetime_in_seconds = 7200) {
  $s3 = amazon_s3_get_instance();
  return $s3->getAuthenticatedURL($bucket, $object, $lifetime_in_seconds);
}

function amazon_s3_object_delete($bucket, $object) {
  $s3 = amazon_s3_get_instance();
  return $s3->deleteObject($bucket, $object);
}

function amazon_s3_acl_options() {
  return array(
    'private' => 'Private',
    'public-read' => 'Public Read',
    'public-read-write' => 'Public Read/Write',
    'authenticated-read' => 'Authenticated Read'
  );
}

/**
 * Forms
 */

function amazon_s3_bucket_create_form() {
  $form['bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('Bucket Name'),
    '#required' => TRUE,
    '#size' => 30,
  );
  $form['access_control'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
  $form['create'] = array('#type' => 'submit', '#value' => 'Create Bucket');
  return $form;
}

function amazon_s3_bucket_create_form_submit($form, &$form_state) {
  $s3 = amazon_s3_get_instance();
  $bucket_name = $form_state['values']['bucket'];
  $access_control = $form_state['values']['access_control'];
  return amazon_s3_bucket_create($bucket_name, $access_control);
}

function amazon_s3_bucket_delete_confirm_form($form, &$form_state, $bucket) {
  $form = array(
    'bucket' => array('#type' => 'value', '#value' => $bucket),
  );
  $confirmation_message = t('Are you sure you want to delete the bucket %bucket?', array('%bucket' => $bucket));
  $cancel_path = 'admin/structure/amazon-s3/buckets';
  return confirm_form($form, $confirmation_message, $cancel_path);
}

function amazon_s3_bucket_delete_confirm_form_submit($form, &$form_state) {
  $bucket = $form_state['values']['bucket'];
  
  $success = amazon_s3_bucket_delete($bucket);
  
  if ($success) {
    $message = t('Successfully deleted the bucket %bucket.', array('%bucket' => $bucket));
    drupal_set_message($message);
  } else {
    $message = t('Failed to delete the bucket %bucket.', array('%bucket' => $bucket));
    drupal_set_message($message, 'error');
  }
  
  $form_state['redirect'] = "admin/structure/amazon-s3/buckets";
}

function amazon_s3_object_delete_confirm_form($form, &$form_state, $bucket, $object) {
  $form = array(
    'bucket' => array('#type' => 'value', '#value' => $bucket),
    'object' => array('#type' => 'value', '#value' => $object),
  );
  $confirmation_message = t("Are you sure you want to delete the object %object from the bucket %bucket?", array('%object' => $object, '%bucket' => $bucket));
  $cancel_path = "admin/structure/amazon-s3/bucket/$bucket";
  $form = confirm_form($form, $confirmation_message, $cancel_path);
  return $form;
}

function amazon_s3_object_delete_confirm_form_submit($form, &$form_state) {
  $bucket = $form_state['values']['bucket'];
  $object = $form_state['values']['object'];
  
  $success = amazon_s3_object_delete($bucket, $object);
  
  if ($success) {
    $message = t('Successfully deleted the object %object from the bucket %bucket', array('%object' => $object, '%bucket' => $bucket));
    drupal_set_message($message);
  } else {
    $message = t('Failed to delete the object %object from the bucket %bucket', array('%object' => $object, '%bucket' => $bucket));
    drupal_set_message($message, 'error');
  }
  
  $form_state['redirect'] = "admin/structure/amazon-s3/bucket/$bucket";
}

function amazon_s3_file_upload_form($form, &$form_state, $bucket) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $form['box'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upload File'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['box']['file'] = array(
    '#type' => 'file',
    '#title' => t('File to upload'),
    '#description' => t('Pick a file to upload to the bucket %bucket.', array('%bucket' => $bucket)),
    '#size' => 40,
  );
  $form['box']['acl'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
  $form['box']['bucket'] = array('#type' => 'value', '#value' => $bucket);
  $form['box']['upload'] = array('#type' => 'submit', '#value' => 'Upload');
  return $form;
}

function amazon_s3_file_upload_form_submit($form, &$form_state) {
  $s3 = amazon_s3_get_instance();
  
  $bucket = $form_state['values']['bucket'];
  $upload_temp_filepath = $_FILES['files']['tmp_name']['file'];
  $object_filename = $_FILES['files']['name']['file'];
  $acl = $form_state['values']['acl'];
  
  $success = $s3->putObjectFile($upload_temp_filepath, $bucket, $object_filename, $acl);
  
  if ($success) {
    $message = t('Succesfully uploaded the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
    drupal_set_message($message);
  } else {
    $message = t('Failed to upload the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
    drupal_set_message($message, 'error');
  }
  
  $form_state['redirect'] = "admin/structure/amazon-s3/bucket/$bucket";
}

function amazon_s3_config_form() {
  $form['aws_access_key'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('aws_access_key', ''),
    '#description' => t('Use your Access Key ID as the value of the AWSAccessKeyId parameter in requests you send to Amazon Web Services (when required). Your Access Key ID identifies you as the party responsible for the request.'),
  );
  $form['aws_secret_key'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('aws_secret_key', ''),
    '#description' => t('<p>Since your Access Key ID is not encrypted in requests to AWS, it could be discovered and used by anyone. Services that are not free require you to provide additional information, a request signature, to verify that a request containing your unique Access Key ID could only have come from you.</p>
                        <p>You use your Secret Access Key to calculate a signature to include in requests to web services that require authenticated requests. To learn more about request signatures, including when to use them and how you calculate them, please refer to the technical documentation for the specific web service(s) you are using. </p>
                        <p>
                        <strong>IMPORTANT:</strong>
                        Your Secret Access Key is a secret, and should be known only by you and AWS. You should never include your Secret Access Key in your requests to AWS. You should never e-mail your Secret Access Key to anyone. It is important to keep your Secret Access Key confidential to protect your account.
                        </p>'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => 'Save');
  return $form;
}

function amazon_s3_config_form_submit($form, &$form_state) {
  variable_set('aws_access_key', trim($form_state['values']['aws_access_key']));
  variable_set('aws_secret_key', trim($form_state['values']['aws_secret_key']));
  drupal_set_message('Successfully saved changes.');
}

/**
 * Page Callbacks for hook_menu
*/

function amazon_s3_view_buckets() {
  $bucket_names = amazon_s3_get_buckets();
  $buckets = array();
  foreach ($bucket_names as $bucket_name) {
    $buckets[] = array(
      'name' => $bucket_name,
      'view_objects' => l('View Objects', "admin/structure/amazon-s3/bucket/$bucket_name"),
      'delete' => l('Delete', "admin/structure/amazon-s3/bucket/$bucket_name/delete"),
    );
  }
  $table = theme('table', array('header' => array('Name', 'View Objects', 'Delete'), 'rows' => $buckets));
  $bucket_create_form = drupal_render(drupal_get_form('amazon_s3_bucket_create_form'));
  return $bucket_create_form . $table;
}

function amazon_s3_view_objects($bucket) {
  $s3 = amazon_s3_get_instance();
  $objects = $s3->getBucket($bucket, NULL, NULL, 100);
  foreach ($objects as &$object) {
    $object['time'] = format_date($object['time'], 'custom', "F j, Y, g:i a");
    $object['size'] = format_size($object['size']);
    $object['download'] = l('Download', amazon_s3_get_object_url($bucket, $object['name']));
    $object['delete'] = l('Delete', "admin/structure/amazon-s3/bucket/$bucket/{$object['name']}/delete");
  }
  $header = array('Name', 'Time', 'Size', 'Hash', 'Download', 'Delete');
  $table = theme('table', array('header' => $header, 'rows' => $objects));
  $file_upload_form = drupal_render(drupal_get_form('amazon_s3_file_upload_form', $bucket));
  return $file_upload_form . $table;
}
