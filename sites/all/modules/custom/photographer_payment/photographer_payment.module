<?php

/**
 * @file
 * Module file for Managing Payment to Photographers
 */
/**
 * Implements hook_menu().
 *
 * 
 */
function photographer_payment_menu() {
	$items['listpayments'] = array(
	'title'           => 'Payment to photographer',
	'description'     => 'Payment to photographer on Monthly basis',
	'page callback' => 'showlist_mp',
	'access arguments' => array('administer store'),
  );
  $items['listuserpayments/%'] = array(
	'title'           => 'Payment to photographer',
	'description'     => 'Payment to photographer ',
	'page callback'  => array('listmp_userbasis'),
	
	'access arguments' => array('administer store'),
  );
  $items['masspayment'] = array(
    'title'           => 'Mass payment',
    'description'     => 'Mass payment on Monthly basis',
	'page callback' => array('masspayment'),
	'access arguments' => array('administer store'),
	
  );
 
  return $items;
}
function showlist_mp(){
   return drupal_get_form('listmp_monthbasis',0,0);
}
function listmp_monthbasis($date){
	
	 $photographer_share = get_photographershare();
	 
	 $mplist_object = new photographer_payment_model();
	 if(count($date)!=0 ){
	    echo $startdate = $date['startdate'];
		echo $enddate = $date['enddate'];
		$mp_listquery  = $mplist_object->list_photographerpayments($startdate,$enddate);
		print_r($startdate) ;
	}
	else{
		$mp_listquery  = $mplist_object->list_photographerpayments();
	}
	//print_r($mp_listquery);
	 $header = array(
						array('data' => t('Sl.no')),array('data' => t('Photographer Paypal Email')), array('data' => t('Amount')), array('data' => t('Order Details')),
					);
	 $rows[] = array(
		array('data' => t('Sl.no')),array('data' => t('Photographer Paypal Email')), array('data' => t('Amount')), array('data' => t('Order Details')),
	);
	 $count = 1;
	
	 $mp_payment = array();
	 $mp_order   = array();
	 $mp_photographers = array();
	 foreach ($mp_listquery as $record) {
	 
	$photographer_price = ($record->sum*$photographer_share)/100;
	if($mp_payment[$record->photographer]){
		$mp_payment[$record->photographer]           += round($photographer_price,2);
		$mp_order[$record->photographer]             .= ','.$record->order_id;
		
		
	}
	else{
		$mp_payment[$record->photographer]            = round($photographer_price,2);
		//$mp_photographers['uid'][]                  = $record->photographer;
		$mp_order[$record->photographer]			  = $record->order_id;
		
	}
	$count +=1;	
	}
	foreach($mp_order as $key => $order){
	  $orderid .= $key.'-'.$order.'&';
	}
	
	$mp_photographers = array_keys($mp_payment);
	
	$usercount = 0;
	foreach($mp_photographers as $users){
	$userlist_object = new photographer_payment_model();
	
	$userdetails[]  = $userlist_object->getuserdetails($users);
	$receiverData1[] = array(
					 'email' =>$userdetails[$usercount-1]['email'],
					'amount' =>round($mp_payment[$users],2),
					'uniqueid' =>$users,
					'note' =>'Thankyou for your bussiness' ,
					 );
					
		
	 $rows[] = array(
					 array('data' =>$usercount+1),
					 array('data' =>$userdetails[$usercount]['email']),
					 array('data' =>uc_currency_format($mp_payment[$users])),
					 array('data' =>l('View Details', 'listuserpayments/' . $users) ),
					 );
		$usercount +=1;		
		
	 
	 }

	  // Set request-specific fields.
	$emailSubject =urlencode('example_email_subject');
	$receiverType = urlencode('EmailAddress');
	$currency = urlencode('USD');							// or other currency ('GBP', 'EUR', 'JPY', 'CAD', 'AUD')


	// Add request-specific fields to the request string.
	$nvpStr="&EMAILSUBJECT=$emailSubject&RECEIVERTYPE=$receiverType&CURRENCYCODE=$currency";
	foreach($receiverData1 as $i => $receiverData) {

		$receiverEmail = urlencode($receiverData['email']);
		
		$amount = urlencode($receiverData['amount']);
		$uniqueID = urlencode($receiverData['uniqueid']);
		$note = urlencode($receiverData['note']);
		$nvpStr .= "&L_EMAIL$i=$receiverEmail&L_Amt$i=$amount&L_UNIQUEID$i=$uniqueID&L_NOTE$i=$note";
		
	}

	
	// Execute the API operation; see the PPHttpPost function above.
	//$httpParsedResponseAr = PPHttpPost('MassPay', $nvpStr);
	 /*$form['startdate'] = array(
		'#type' => 'textfield',
		'#title' => t('Start Date'),
		'#size' => 10,
		'#maxlength' => 10,
		'#attributes' => array('class' => array('pickadate')),
		 );
	$form['enddate'] = array(
		'#type' => 'textfield',
		'#title' => t('End Date'),
		'#size' => 10,
		'#maxlength' => 10,
		'#attributes' => array('class' => array('pickadate')),
		 );	 
	 $form['list'] = array(
		'#type' => 'submit',
		'#value'=>'Show list',
		'#submit' => array('listmp_bydate'),
	
	 );	 */
	 $form['order'] = array(
		'#type'=>'hidden',
		'#value'=>$orderid,);
	$form['form_mytable'] = array(
		'#markup' => theme('table', array('header' => $header, 'rows'=> $rows))
		);
	$form['mp_values'] = array(
		'#type'=>'hidden',
		'#value'=>$nvpStr,);
	$form['submit']  = array(
		'#type'=>'submit',
		'#value'=>'Make Mass payment',
		'#prefix' => '<div style="float:right">' , 
		'#suffix' => '</div>',
		);
	return $form;
 
 }
 
 /**
 * list orders for each photographer
 */
 function listmp_userbasis(){
  $uri = $_SERVER['REQUEST_URI'];
  $uid = end(explode('/',$_SERVER['REQUEST_URI']));
 
  if($uid != 0){
    $mpuserlist_object = new photographer_payment_model();
	$mp_userlistquery  = $mpuserlist_object->list_photographerpayments($uid);
	$header1 = array(
					array('data' => t('Sl.no')),array('data' => t('OrderId')), array('data' => t('Order Date')), array('data' => t('Image')),array('data' => t('Price')),array('data' => t('Payment to Photographer')),
                );
	$rows1[] = array(
		array('data' => t('Sl.no')),array('data' => t('OrderId')), array('data' => t('Order Date')), array('data' => t('Image')),array('data' => t('Price')),array('data' => t('Payment to Photographer')),
	);

	 $count = 1;
	 $photographer_share = get_photographershare();				
	 foreach ($mp_userlistquery as $record) {
	   //$photographer_payment = $record->price*0.5;
	   $payment = ($record->price*$photographer_share)/100;
	   $rows1[] = array(
					 array('data' =>$count),
					 array('data' =>$record->order_id),
					 array('data' =>$record->orderdate),
					 array('data' =>$record->nid),
					 array('data' =>$record->price),
					array('data' => $payment),
				
				 );
			$count +=1;		
			
		 
		 }
		 
		 
			return theme('table', array('header' => $header1, 'rows'=> $rows1));
		
		}
 }
 
 function listmp_bydate($form,&$form_state){
	$startdate = $form_state['values']['startdate'];
  $enddate = $form_state['values']['enddate'];
 $date = array('startdate' => $startdate,'enddate' => $enddate,);
 listmp_monthbasis($date);
 }
 /**
 * Submit function for listmp_monthbasis()
 */
 function listmp_monthbasis_submit($form,&$form_state){
 $nvpStr = $form_state['values']['mp_values'];
 $nvparray = explode('&',$nvpStr);
 $order_id = explode('&',$form_state['values']['order']);
 
 

 $httpParsedResponseAr = PPHttpPost('MassPay', $nvpStr);
 if("SUCCESS" == strtoupper($httpParsedResponseAr["ACK"]) || "SUCCESSWITHWARNING" == strtoupper($httpParsedResponseAr["ACK"])) {
	for($i = 4;$i<count($nvparray);$i+=4){
	 $uid = explode('=',$nvparray[$i+2]);
	 $amount = explode('=',$nvparray[$i+1]);
	  $values[] = 
						array(
						'uid' => $uid[1] ,
						'amount' => $amount[1],
						'paymentdate'=> REQUEST_TIME,
						'payment_status'=>1,
						'transaction_id' => 'xyz'
						);
						
						
	 }
	
	//exit('MassPay Completed Successfully: '.print_r($httpParsedResponseAr, true));
} else  {
    for($i = 4;$i<count($nvparray);$i+=4){
	 $uid = explode('=',$nvparray[$i+2]);
	 $amount = explode('=',$nvparray[$i+1]);
	  $values[] = 
						array(
						'uid' => $uid[1] ,
						'amount' => $amount[1],
						'paymentdate'=> REQUEST_TIME,
						'payment_status'=>3,
						'transaction_id' => 'xyz'
						);
						
						
	 }
	
	//exit('MassPay failed: ' . print_r($httpParsedResponseAr, true));
}

$query = db_insert('photographer_payment')->fields(array('uid','amount','paymentdate','payment_status','transaction_id'));
				foreach ($values as $record) {
				$query->values($record);
				}
				$query->execute();
 
 drupal_set_message('Success');
	
 }
/**
* Masspayment for photographers
*/
function masspayment(){
}
/**
 * Send HTTP POST Request
 *
 * @param	string	The API method name
 * @param	string	The POST Message fields in &name=value pair format
 * @return	array	Parsed HTTP Response body
 */
function PPHttpPost($methodName_, $nvpStr_) {


	global $environment;
  
   $environment = variable_get('uc_paypal_wpp_server');
	// Set up your API credentials, PayPal end point, and API version.
	$API_UserName = urlencode(variable_get('uc_paypal_api_username'));
	$API_Password = urlencode(variable_get('uc_paypal_api_password'));
	$API_Signature = urlencode(variable_get('uc_paypal_api_signature'));
	$API_Endpoint = "https://api-3t.paypal.com/nvp";
	if("sandbox" === $environment || "beta-sandbox" === $environment) {
		$API_Endpoint = "https://api-3t.".$environment.".paypal.com/nvp";
	}
	$version = urlencode('51.0');

	// Set the curl parameters.
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
	curl_setopt($ch, CURLOPT_VERBOSE, 1);

	// Turn off the server and peer verification (TrustManager Concept).
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);

	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_POST, 1);

	// Set the API operation, version, and API signature in the request.
	$nvpreq = "METHOD=$methodName_&VERSION=$version&PWD=$API_Password&USER=$API_UserName&SIGNATURE=$API_Signature$nvpStr_";
   
	// Set the request as a POST FIELD for curl.
	curl_setopt($ch, CURLOPT_POSTFIELDS, $nvpreq);

	// Get response from the server.
	$httpResponse = curl_exec($ch);
    
	if(!$httpResponse) {
		exit("$methodName_ failed: ".curl_error($ch).'('.curl_errno($ch).')');
	}
    
	
	// Extract the response details.
	$httpResponseAr = explode("&", $httpResponse);
	
	$httpParsedResponseAr = array();
	foreach ($httpResponseAr as $i => $value) {
		$tmpAr = explode("=", $value);
		if(sizeof($tmpAr) > 1) {
			$httpParsedResponseAr[$tmpAr[0]] = $tmpAr[1];
		}
	}

	if((0 == sizeof($httpParsedResponseAr)) || !array_key_exists('ACK', $httpParsedResponseAr)) {
		exit("Invalid HTTP Response for POST request($nvpreq) to $API_Endpoint.");
	}

	return $httpParsedResponseAr;
}
function get_photographershare(){
  $share = variable_get('photographer_share');
  $photographer_share = 100 - $share;
  return $photographer_share;
 }
